####Kotlin Basics Cheat Sheet###

“Hello, World” program
	fun main() {
 	println("Hello, World")
	}

Difference between print() and println().

print(): It does not add any new line.
println(): It adds new line after the message gets dispalyed.

val and var
var: when the variable value is to be modified.
val: where the variable value will not change after first assigned.

User Input
User input in Kotlin is very simple.  We simply create a variable that holds the input, then get the user input with readLine()

	val name = readLine()

String Concatenation and Interpolation (Templates)
String concatenation refers to combining strings (or other data types) with the use of a + sign
    println("Hello" + "Sam")   // --> HelloSam
    val message = "Hi there"
    val name = "Sam"
 	println(message + name)    // --> Hi thereSamcopy
String Interpolation, on the other hand, allows us to inject variables into a string
    val message = "Hi there"
    val name = "Sam"
    println("$message $name")    // --> Hi there Sam

 Data Types
 Floats and Integers
 	val numInt = 6
    println(numInt)  //  --> 6
    val numFloat = 6f
    println(numFloat)  //  --> 6.0

 convert user input into an Integer to perform math operations.
    val userNumber = readLine()!!.toInt()
    val anotherNumber = 8
    println(anotherNumber + userNumber)  //  --> If the user enters 3, we would get 11

	.length
printing a length of String to avoid error index out of range.
	.subSequence(startNumber, endNumber)
printing a range of letters

Basic Operations
addition, subtraction, multiplication, division, and the modulo operator.

	var num = 5
    println(num + 10)  //  --> 15
    println(num)  //  --> 5
    var num = 10
    println(num)  //  --> 10
    num /= 2
    println(num)  //  --> 5
    num *= 3
    println(num)  //  --> 15
    var num = 10 / 0  //  --> Zero Division Error
    var num = 10
    println(num % 3)  //  --> 1

If Statements

	if (someBoolean) {
 	   doThing()
	} else {
 	   doOtherThing()
	}

Try/Catch
We can use the try-catch block for exception handling.
	try {
    // some code
	} catch (e: SomeException) {
    // handler
	}

For Loops
Loops are another essential part of programming. Very often we need something to happen multiple times. Instead of typing the same thing over and over again, we can use loops.
	for (i in 0..10) { } // 1 - 10
	for (i in 0 until 10) // 1 - 9
	(0..10).forEach { }
	for (i in 0 until 10 step 2) // 0, 2, 4, 6, 8

While Loops
While loops are very similar to For Loops. They can perform the same actions.

	while (x > 0) {
   	 x--
	}

	do {
   	 x--
	} while (x > 0)

When
When blocks are similar to a series of if statements. They allow us to perform a check in a more concise way and handle each condition appropriately.

	val grade = readLine()!!.toInt()
    when {
        grade < 60 -> println("F")
        grade < 70 -> println("D")
        grade < 80 -> println("C")
        grade < 90 -> println("B")
        else -> println("A")
    }

Import Random Module
	import kotlin.random.Random
create a random number between 0 and 10 with the help of the Random library.
	val randomNumber = Random.nextInt(11)

Here we would get a number between 7 and 14.
	val randomNumber = Random.nextInt(7, 15)
